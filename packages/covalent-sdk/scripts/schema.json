[
  {
    "id": "1",
    "title": "Get historical token prices",
    "description": "Given `:chain_id` and `:contract_addresses`, return their historical prices. Can filter by date ranges and convert to `:quote_currency`. Only daily granularity is supported.",
    "classType": "Pricing endpoints",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/pricing/historical_by_addresses_v2/:chain_id/:quote_currency/:contract_addresses/",
    "released_at": "",
    "order": 1,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "contract_addresses",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "quote_currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "from",
        "description": "The start day of the historical price range. (YYYY-MM-DD)",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "to",
        "description": "The end day of the historical price range. (YYYY-MM-DD)",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "prices-at-asc",
        "description": "Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [
      {
        "title": "Source for price feeds",
        "description": "We rely on Coingecko for our source of token prices. Spot prices are updated every 10s and historical prices (daily granularity) are updated every day."
      }
    ],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "AddressWithHistoricalPricesItem",
      "schema": {
        "type": "object",
        "properties": {
          "contract_decimals": {
            "type": "integer",
            "description": "Smart contract decimals.",
            "format": "int32"
          },
          "contract_name": {
            "type": "string",
            "description": "Smart contract name."
          },
          "contract_ticker_symbol": {
            "type": "string",
            "description": "Smart contract ticker symbol."
          },
          "contract_address": {
            "type": "string",
            "description": "Smart contract address."
          },
          "supports_erc": {
            "type": "array",
            "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
            "items": {
              "items": {
                "type": "string",
                "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
              }
            }
          },
          "logo_url": {
            "type": "string",
            "description": "Smart contract URL."
          },
          "update_at": {
            "type": "string",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string"
          },
          "prices": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/HistoricalPriceItem"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "type": "object"
              }
            }
          }
        }
      },
      "components": {
        "ContractMetadata": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            }
          }
        },
        "AddressWithHistoricalPricesItem": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "update_at": {
              "type": "string",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string"
            },
            "prices": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/HistoricalPriceItem"
                }
              }
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "HistoricalPriceItem": {
          "type": "object",
          "properties": {
            "contract_metadata": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "date": {
              "type": "string",
              "format": "date"
            },
            "price": {
              "type": "number",
              "format": "float"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get token balances for address",
    "description": "Given `:chain_id` and wallet `:address`, return current token balances along with their spot prices. This endpoint supports a variety of token standards like ERC20, ERC721 and ERC1155. As a special case, network native tokens like ETH on Ethereum are also returned even though it's not a token contract.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/address/:address/balances_v2/",
    "released_at": "2022-02-09",
    "order": 1,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "nft",
        "description": "Set to `true` to return ERC721 and ERC1155 assets. Defaults to `false`.",
        "type": "boolean",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "no-nft-fetch",
        "description": "Set to `true` to skip fetching NFT metadata, which can result in faster responses. Defaults to `false` and only applies when `nft=true`.",
        "type": "boolean",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example of fetching token balances on Ethereum (with ENS resolution)",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "demo.eth"
          }
        ]
      },
      {
        "description": "Basic example of fetching NFTs (ERC721 and ERC1155) on Ethereum",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "demo.eth"
          },
          {
            "name": "nft",
            "value": "true"
          }
        ]
      }
    ],
    "notes": [
      {
        "title": "🔥 Now supporting Solana",
        "description": "Get token balances for any address on Solana using chain_id 1399811149."
      },
      {
        "title": "No support for re-balancing tokens",
        "description": "Tokens like Ampleforth (AMPL) that auto re-balance with custom scaling factors are not supported. "
      },
      {
        "title": "Tokens classified as dust",
        "description": "Tokens with less than $0.1 in spot fiat value get classified as dust. The developer is free to ignore/hide these tokens as they wish."
      }
    ],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "BalanceResponseType",
      "schema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/WalletBalanceItem"
              }
            }
          }
        }
      },
      "components": {
        "BalanceResponseType": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "The requested wallet address."
            },
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "next_update_at": {
              "type": "string",
              "description": "The next updated time.",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string",
              "description": "The requested fiat currency."
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/WalletBalanceItem"
                }
              }
            }
          }
        },
        "INFTMetadata": {
          "type": "object",
          "description": "Array of NFTs that are held under this contract."
        },
        "WalletBalanceItem": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "last_transferred_at": {
              "type": "string",
              "description": "Last transferred date for a wallet",
              "format": "date-time"
            },
            "native_token": {
              "type": "boolean",
              "description": "Indicates if a token is the chain's native gas token, eg: ETH on Ethereum."
            },
            "type": {
              "type": "string",
              "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`."
            },
            "balance": {
              "type": "integer",
              "description": "The asset balance. Use `contract_decimals` to scale this balance for display purposes."
            },
            "balance_24h": {
              "type": "integer",
              "description": "The asset balance 24 hours ago."
            },
            "quote_rate": {
              "type": "number",
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float"
            },
            "quote_rate_24h": {
              "type": "number",
              "description": "The spot exchange rate in `quote-currency` as of 24 hours ago.",
              "format": "float"
            },
            "quote": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float"
            },
            "quote_24h": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency` as of 24 hours ago.",
              "format": "float"
            },
            "nft_data": {
              "type": "array",
              "description": "Array of NFTs that are held under this contract.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/INFTMetadata"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get historical portfolio value over time",
    "description": "Given `:chain_id` and wallet `:address`, return wallet value for the last 30 days at 24 hour interval timestamps.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/address/:address/portfolio_v2/",
    "released_at": "",
    "order": 2,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "days",
        "description": "The range of the historical portfolio in days, defaults to 30 days (max days = 2000).",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example of fetching historical portfolio on Ethereum (with ENS resolution)",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "demo.eth"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "HistoricalPortfolioResponse",
      "schema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "List of tokens in portfolio",
            "items": {
              "items": {
                "type": "object",
                "description": "List of tokens in portfolio"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "HistoricalPortfolioResponse": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "The requested wallet address."
            },
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "next_update_at": {
              "type": "string",
              "description": "The next updated time.",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string",
              "description": "The requested fiat currency."
            },
            "chain_id": {
              "type": "integer",
              "description": "The requested chain ID.",
              "format": "int64"
            },
            "items": {
              "type": "array",
              "description": "List of tokens in portfolio",
              "items": {
                "items": {
                  "type": "object",
                  "description": "List of tokens in portfolio"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get transactions for address",
    "description": "Given `:chain_id` and wallet `:address`, return all transactions along with their decoded log events. This endpoint does a deep-crawl of the blockchain to retrieve all kinds of transactions that references the `:address` including indexed topics within the event logs.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/address/:address/transactions_v2/",
    "released_at": "",
    "order": 3,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "block-signed-at-asc",
        "description": "Sort the transactions in chronological ascending order. By default, it's set to `false` and returns transactions in chronological descending order.",
        "type": "boolean",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "no-logs",
        "description": "Setting this to `true` will omit decoded event logs, resulting in lighter and faster responses. By default it's set to `false`.",
        "type": "boolean",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example of fetching transactions from an address on Ethereum with decoded log events",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0xa79E63e78Eec28741e711f89A672A4C40876Ebf3"
          }
        ]
      }
    ],
    "notes": [
      {
        "title": "sender_logo_url field",
        "description": "sender_logo_url may reference to a not found resource (return status 404)."
      }
    ],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "TransactionResponse",
      "schema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "DecodedParamItem": {
          "type": "object",
          "description": "The parameters of the decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the parameter."
            },
            "type": {
              "type": "string",
              "description": "The type of the parameter."
            },
            "indexed": {
              "type": "boolean",
              "description": "The index of the parameter."
            },
            "decoded": {
              "type": "boolean",
              "description": "The decoded value of the parameter."
            },
            "value": {
              "type": "object",
              "description": "The value of the parameter."
            }
          }
        },
        "TransactionResponse": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "The requested wallet address."
            },
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "next_update_at": {
              "type": "string",
              "description": "The next updated time.",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string",
              "description": "The requested fiat currency."
            },
            "chain_id": {
              "type": "integer",
              "description": "The requested chain ID.",
              "format": "int64"
            },
            "items": {
              "type": "array",
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "DecodedItem": {
          "type": "object",
          "description": "The decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the decoded item."
            },
            "signature": {
              "type": "string",
              "description": "The signature of the decoded item."
            },
            "params": {
              "type": "array",
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              }
            }
          }
        },
        "LogEventItem": {
          "type": "object",
          "description": "The log events.",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int64"
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int64"
            },
            "log_offset": {
              "type": "integer",
              "description": "The log offset.",
              "format": "int64"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "raw_log_topics": {
              "type": "array",
              "items": {
                "items": {
                  "type": "string"
                }
              }
            },
            "sender_contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "sender_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "sender_contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "sender_address": {
              "type": "string",
              "description": "The address of the sender."
            },
            "sender_address_label": {
              "type": "string",
              "description": "The label of the sender address."
            },
            "sender_logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "raw_log_data": {
              "type": "string",
              "description": "The log events in raw."
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            }
          }
        },
        "BlockTransactionWithLogEvents": {
          "type": "object",
          "description": "The transactions.",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int32"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int32"
            },
            "successful": {
              "type": "boolean",
              "description": "The transaction status."
            },
            "from_address": {
              "type": "string",
              "description": "The address where the transaction is from."
            },
            "from_address_label": {
              "type": "string",
              "description": "The label of `from` address."
            },
            "to_address": {
              "type": "string",
              "description": "The address where the transaction is to."
            },
            "to_address_label": {
              "type": "string",
              "description": "The label of `to` address."
            },
            "value": {
              "type": "number",
              "description": "The value attached to this tx."
            },
            "value_quote": {
              "type": "number",
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double"
            },
            "gas_offered": {
              "type": "integer",
              "description": "The gas offered for this tx.",
              "format": "int64"
            },
            "gas_spent": {
              "type": "integer",
              "description": "The gas spent for this tx.",
              "format": "int64"
            },
            "gas_price": {
              "type": "integer",
              "description": "The gas price at the time of this tx.",
              "format": "int64"
            },
            "fees_paid": {
              "type": "number",
              "description": "The total transaction fees paid for this tx."
            },
            "gas_quote": {
              "type": "number",
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double"
            },
            "gas_quote_rate": {
              "type": "number",
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double"
            },
            "log_events": {
              "type": "array",
              "description": "The log events.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get a transaction",
    "description": "Given `:chain_id` and `:tx_hash`, return the transaction data with their decoded event logs.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/transaction_v2/:tx_hash/",
    "released_at": "",
    "order": 4,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "tx_hash",
        "description": "Hex encoded transaction hash.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "no-logs",
        "description": "Setting this to `true` will omit decoded event logs, resulting in lighter and faster responses. By default it's set to `false`.",
        "type": "boolean",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example of fetching a transaction of an Ethereum address",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "tx_hash",
            "value": "0xbda92389200cadac424d64202caeab70cd5e93756fe34c08578adeb310bba254"
          }
        ]
      }
    ],
    "notes": [
      {
        "title": "sender_logo_url field",
        "description": "sender_logo_url may reference to a not found resource (return status 404)."
      }
    ],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "SingleTransactionResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "SingleTransactionResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "DecodedParamItem": {
          "type": "object",
          "description": "The parameters of the decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the parameter."
            },
            "type": {
              "type": "string",
              "description": "The type of the parameter."
            },
            "indexed": {
              "type": "boolean",
              "description": "The index of the parameter."
            },
            "decoded": {
              "type": "boolean",
              "description": "The decoded value of the parameter."
            },
            "value": {
              "type": "object",
              "description": "The value of the parameter."
            }
          }
        },
        "DecodedItem": {
          "type": "object",
          "description": "The decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the decoded item."
            },
            "signature": {
              "type": "string",
              "description": "The signature of the decoded item."
            },
            "params": {
              "type": "array",
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              }
            }
          }
        },
        "LogEventItem": {
          "type": "object",
          "description": "The log events.",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int64"
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int64"
            },
            "log_offset": {
              "type": "integer",
              "description": "The log offset.",
              "format": "int64"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "raw_log_topics": {
              "type": "array",
              "items": {
                "items": {
                  "type": "string"
                }
              }
            },
            "sender_contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "sender_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "sender_contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "sender_address": {
              "type": "string",
              "description": "The address of the sender."
            },
            "sender_address_label": {
              "type": "string",
              "description": "The label of the sender address."
            },
            "sender_logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "raw_log_data": {
              "type": "string",
              "description": "The log events in raw."
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            }
          }
        },
        "BlockTransactionWithLogEvents": {
          "type": "object",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int32"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int32"
            },
            "successful": {
              "type": "boolean",
              "description": "The transaction status."
            },
            "from_address": {
              "type": "string",
              "description": "The address where the transaction is from."
            },
            "from_address_label": {
              "type": "string",
              "description": "The label of `from` address."
            },
            "to_address": {
              "type": "string",
              "description": "The address where the transaction is to."
            },
            "to_address_label": {
              "type": "string",
              "description": "The label of `to` address."
            },
            "value": {
              "type": "number",
              "description": "The value attached to this tx."
            },
            "value_quote": {
              "type": "number",
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double"
            },
            "gas_offered": {
              "type": "integer",
              "description": "The gas offered for this tx.",
              "format": "int64"
            },
            "gas_spent": {
              "type": "integer",
              "description": "The gas spent for this tx.",
              "format": "int64"
            },
            "gas_price": {
              "type": "integer",
              "description": "The gas price at the time of this tx.",
              "format": "int64"
            },
            "fees_paid": {
              "type": "number",
              "description": "The total transaction fees paid for this tx."
            },
            "gas_quote": {
              "type": "number",
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double"
            },
            "gas_quote_rate": {
              "type": "number",
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double"
            },
            "log_events": {
              "type": "array",
              "description": "The log events.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get ERC20 token transfers for address",
    "description": "Given `:chain_id`, wallet `:address` and `:contract-address`, return all ERC20 token contract transfers along with their historical prices at the time of their transfer.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/address/:address/transfers_v2/",
    "released_at": "",
    "order": 5,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "contract-address",
        "description": "Smart contract address.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "starting-block",
        "description": "Starting block to define a block range.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "ending-block",
        "description": "Ending block to define a block range.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": " Basic example to fetch transfer of USDC from an Ethereum address",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x197e3eCCD00F07B18205753C638c3E59013A92bf"
          },
          {
            "name": "contract-address",
            "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "TransferResponse",
      "schema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The requested wallet address."
          },
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "description": "The next updated time.",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string",
            "description": "The requested fiat currency."
          },
          "chain_id": {
            "type": "integer",
            "description": "The requested chain ID.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "The transactions.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/BlockTransactionWithContractTransfers"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "MethodCallsForTransfers": {
          "type": "object",
          "description": "Additional details on which transfer events were invoked. Defaults to `true`.",
          "properties": {
            "sender_address": {
              "type": "string",
              "description": "The address of the sender."
            },
            "method": {
              "type": "string",
              "description": "The name of the decoded item."
            }
          }
        },
        "TransferResponse": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "The requested wallet address."
            },
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "next_update_at": {
              "type": "string",
              "description": "The next updated time.",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string",
              "description": "The requested fiat currency."
            },
            "chain_id": {
              "type": "integer",
              "description": "The requested chain ID.",
              "format": "int64"
            },
            "items": {
              "type": "array",
              "description": "The transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithContractTransfers"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "TokenTransferItem": {
          "type": "object",
          "description": "Transfer items.",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "from_address": {
              "type": "string",
              "description": "The address where the transfer is from."
            },
            "from_address_label": {
              "type": "string",
              "description": "The label of `from` address."
            },
            "to_address": {
              "type": "string",
              "description": "The address where the transfer is to."
            },
            "to_address_label": {
              "type": "string",
              "description": "The label of `to` address."
            },
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "transfer_type": {
              "type": "string",
              "description": "IN/OUT."
            },
            "delta": {
              "type": "number",
              "description": "The delta attached to this transfer."
            },
            "balance": {
              "type": "number",
              "description": "The transfer balance. Use `contract_decimals` to scale this balance for display purposes."
            },
            "quote_rate": {
              "type": "number",
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "double"
            },
            "delta_quote": {
              "type": "number",
              "description": "The current delta converted to fiat in `quote-currency`.",
              "format": "double"
            },
            "balance_quote": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "double"
            },
            "method_calls": {
              "type": "array",
              "description": "Additional details on which transfer events were invoked. Defaults to `true`.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/MethodCallsForTransfers"
                }
              }
            }
          }
        },
        "BlockTransactionWithContractTransfers": {
          "type": "object",
          "description": "The transactions.",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int32"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int32"
            },
            "successful": {
              "type": "boolean",
              "description": "The transaction status."
            },
            "from_address": {
              "type": "string",
              "description": "The address where the transaction is from."
            },
            "from_address_label": {
              "type": "string",
              "description": "The label of `from` address."
            },
            "to_address": {
              "type": "string",
              "description": "The address where the transaction is to."
            },
            "to_address_label": {
              "type": "string",
              "description": "The label of `to` address."
            },
            "value": {
              "type": "number",
              "description": "The value attached to this tx."
            },
            "value_quote": {
              "type": "number",
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double"
            },
            "gas_offered": {
              "type": "integer",
              "description": "The gas offered for this tx.",
              "format": "int64"
            },
            "gas_spent": {
              "type": "integer",
              "description": "The gas spent for this tx.",
              "format": "int64"
            },
            "gas_price": {
              "type": "integer",
              "description": "The gas price at the time of this tx.",
              "format": "int64"
            },
            "fees_paid": {
              "type": "number",
              "description": "The total transaction fees paid for this tx."
            },
            "gas_quote": {
              "type": "number",
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double"
            },
            "gas_quote_rate": {
              "type": "number",
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double"
            },
            "transfers": {
              "type": "array",
              "description": "Transfer items.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenTransferItem"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get a block",
    "description": "Given `:chain_id` and `:block_height`, return a single block at `:block_height`. If `:block_height` is set to the value `latest`, return the latest block available.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/block_v2/:block_height/",
    "released_at": "",
    "order": 6,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "block_height",
        "description": "The height of the block.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example to get latest block of Palm Mainnet",
        "params": [
          {
            "name": "chain_id",
            "value": "11297108109"
          },
          {
            "name": "block_height",
            "value": "latest"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "SingleBlockResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/Block"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "Block": {
          "type": "object",
          "properties": {
            "signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int32"
            }
          }
        },
        "SingleBlockResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get block heights",
    "description": "Given `:chain_id`, `:start_date` and `:end_date`, return all the block height(s) of a particular chain within a date range. If the `:end_date` is set to `latest`, return every block height from the `:start_date` to now.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/block_v2/:start_date/:end_date/",
    "released_at": "",
    "order": 7,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "start_date",
        "description": "The start datetime of the block height(s). (yyyy-MM-ddTHH:mm:ssZ), eg: 2020-01-01 or 2020-01-01T03:36:50z",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "end_date",
        "description": "The ending datetime of the block height(s). (yyyy-MM-ddTHH:mm:ssZ), eg: 2020-01-02 or 2020-01-02T03:36:50z",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example of retrieving block heights given a certain date range",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "start_date",
            "value": "2021-01-01"
          },
          {
            "name": "end_date",
            "value": "2021-01-03"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "SingleBlockResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/Block"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "Block": {
          "type": "object",
          "properties": {
            "signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int32"
            }
          }
        },
        "SingleBlockResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K pools",
    "description": "Given `:chain_id` and `:dexname`, return pool information across all `XY=K` pools including LP token prices, reserves, exchange volumes and fees.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/pools/",
    "released_at": "",
    "order": 8,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "contract-addresses",
        "description": "If `contract-addresses` (a comma separated list) is present, only return the pools that contain these contracts.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "tickers",
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "UniswapLikeExchangeListResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeV2"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "UniswapLikeExchangeListResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeV2"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "ExchangeVolumeV2": {
          "type": "object",
          "properties": {
            "exchange": {
              "type": "string"
            },
            "swap_count_24h": {
              "type": "integer",
              "format": "int64"
            },
            "total_liquidity_quote": {
              "type": "number",
              "format": "float"
            },
            "volume_24h_quote": {
              "type": "number",
              "format": "float"
            },
            "fee_24h_quote": {
              "type": "number",
              "format": "float"
            },
            "total_supply": {
              "type": "integer"
            },
            "quote_rate": {
              "type": "number",
              "format": "float"
            },
            "block_height": {
              "type": "integer",
              "format": "int32"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "chain_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "volume_7d_quote": {
              "type": "number",
              "format": "float"
            },
            "annualized_fee": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "TokenV2": {
          "type": "object",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_name": {
              "type": "string"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "quote_rate": {
              "type": "number",
              "format": "float"
            },
            "reserve": {
              "type": "integer"
            },
            "logo_url": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "contract_decimals": {
              "type": "integer",
              "format": "int32"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get log events by contract address",
    "description": "Given `:chain_id` and contract `:address`, return a paginated list of decoded log events emitted by a particular smart contract.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/events/address/:address/",
    "released_at": "",
    "order": 8,
    "realTime": true,
    "websocketSupport": true,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "starting-block",
        "description": "Starting block to define a block range.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "ending-block",
        "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example to fetch log events of a contract address between two block heights",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0xc0da01a04c3f3e0be433606045bb7017a7323e38"
          },
          {
            "name": "starting-block",
            "value": "12115107"
          },
          {
            "name": "ending-block",
            "value": "12240004"
          }
        ]
      }
    ],
    "notes": [
      {
        "title": "sender_logo_url field",
        "description": "sender_logo_url may reference to a not found resource (return status 404)."
      }
    ],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "EventsListResponseType",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/LogEventItem"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "DecodedParamItem": {
          "type": "object",
          "description": "The parameters of the decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the parameter."
            },
            "type": {
              "type": "string",
              "description": "The type of the parameter."
            },
            "indexed": {
              "type": "boolean",
              "description": "The index of the parameter."
            },
            "decoded": {
              "type": "boolean",
              "description": "The decoded value of the parameter."
            },
            "value": {
              "type": "object",
              "description": "The value of the parameter."
            }
          }
        },
        "EventsListResponseType": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "DecodedItem": {
          "type": "object",
          "description": "The decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the decoded item."
            },
            "signature": {
              "type": "string",
              "description": "The signature of the decoded item."
            },
            "params": {
              "type": "array",
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              }
            }
          }
        },
        "LogEventItem": {
          "type": "object",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int64"
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int64"
            },
            "log_offset": {
              "type": "integer",
              "description": "The log offset.",
              "format": "int64"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "raw_log_topics": {
              "type": "array",
              "items": {
                "items": {
                  "type": "string"
                }
              }
            },
            "sender_contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "sender_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "sender_contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "sender_address": {
              "type": "string",
              "description": "The address of the sender."
            },
            "sender_address_label": {
              "type": "string",
              "description": "The label of the sender address."
            },
            "sender_logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "raw_log_data": {
              "type": "string",
              "description": "The log events in raw."
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K pools by address",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return pool information across all `XY=K` pools including LP token prices, reserves, exchange volumes and fees for address.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/pools/address/:address/",
    "released_at": "",
    "order": 9,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "tickers",
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "UniswapLikeExchangeListResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeV2"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "UniswapLikeExchangeListResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeV2"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "ExchangeVolumeV2": {
          "type": "object",
          "properties": {
            "exchange": {
              "type": "string"
            },
            "swap_count_24h": {
              "type": "integer",
              "format": "int64"
            },
            "total_liquidity_quote": {
              "type": "number",
              "format": "float"
            },
            "volume_24h_quote": {
              "type": "number",
              "format": "float"
            },
            "fee_24h_quote": {
              "type": "number",
              "format": "float"
            },
            "total_supply": {
              "type": "integer"
            },
            "quote_rate": {
              "type": "number",
              "format": "float"
            },
            "block_height": {
              "type": "integer",
              "format": "int32"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "chain_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "volume_7d_quote": {
              "type": "number",
              "format": "float"
            },
            "annualized_fee": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "TokenV2": {
          "type": "object",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_name": {
              "type": "string"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "quote_rate": {
              "type": "number",
              "format": "float"
            },
            "reserve": {
              "type": "integer"
            },
            "logo_url": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "contract_decimals": {
              "type": "integer",
              "format": "int32"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get log events by topic hash(es)",
    "description": "Given `:chain_id` and `:topic` hash(es), return a paginated list of decoded log events with one or more topic hashes separated by a comma.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/events/topics/:topic/",
    "released_at": "",
    "order": 9,
    "realTime": true,
    "websocketSupport": true,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "topic",
        "description": "Topic hash value from log records.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "secondary-topics",
        "description": "Additional topic hash(es) to filter on -- padded & unpadded address fields are supported.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "starting-block",
        "description": "Starting block to define a block range.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "ending-block",
        "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "sender-address",
        "description": "The address of the sender.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example to fetch a topic hash between two block heights on Ethereum",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "topic",
            "value": "0x804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a"
          },
          {
            "name": "starting-block",
            "value": "12500000"
          },
          {
            "name": "ending-block",
            "value": "12500100"
          },
          {
            "name": "sender-address",
            "value": "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9"
          }
        ]
      }
    ],
    "notes": [
      {
        "title": "Topic hash details",
        "description": "Topic hash can be calculated using our topic hash calculator in our documentation section."
      },
      {
        "title": "sender_logo_url field",
        "description": "sender_logo_url may reference to a not found resource (return status 404)."
      }
    ],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "EventsListResponseType",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/LogEventItem"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "DecodedParamItem": {
          "type": "object",
          "description": "The parameters of the decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the parameter."
            },
            "type": {
              "type": "string",
              "description": "The type of the parameter."
            },
            "indexed": {
              "type": "boolean",
              "description": "The index of the parameter."
            },
            "decoded": {
              "type": "boolean",
              "description": "The decoded value of the parameter."
            },
            "value": {
              "type": "object",
              "description": "The value of the parameter."
            }
          }
        },
        "EventsListResponseType": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "DecodedItem": {
          "type": "object",
          "description": "The decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the decoded item."
            },
            "signature": {
              "type": "string",
              "description": "The signature of the decoded item."
            },
            "params": {
              "type": "array",
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              }
            }
          }
        },
        "LogEventItem": {
          "type": "object",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int64"
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int64"
            },
            "log_offset": {
              "type": "integer",
              "description": "The log offset.",
              "format": "int64"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "raw_log_topics": {
              "type": "array",
              "items": {
                "items": {
                  "type": "string"
                }
              }
            },
            "sender_contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "sender_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "sender_contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "sender_address": {
              "type": "string",
              "description": "The address of the sender."
            },
            "sender_address_label": {
              "type": "string",
              "description": "The label of the sender address."
            },
            "sender_logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "raw_log_data": {
              "type": "string",
              "description": "The log events in raw."
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K address exchange balances",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return address exchange balances for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/address/:address/balances/",
    "released_at": "",
    "order": 10,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "BalanceResponseType",
      "schema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/ContainerU"
          }
        }
      },
      "components": {
        "UniswapV2BalanceItem": {
          "type": "object",
          "properties": {
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            }
          }
        },
        "BalanceResponseType": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "next_update_at": {
              "type": "string",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/ContainerU"
            }
          }
        },
        "UniswapTokenWithSupply": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "balance": {
              "type": "integer",
              "description": "Current balance."
            },
            "quote": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float"
            },
            "quote_rate": {
              "type": "number",
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float"
            },
            "total_supply": {
              "type": "integer",
              "description": "Total supply of this pool token."
            }
          }
        },
        "ContainerU": {
          "type": "object",
          "properties": {
            "balances": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              }
            }
          }
        },
        "UniswapToken": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "balance": {
              "type": "integer",
              "description": "Current balance."
            },
            "quote": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float"
            },
            "quote_rate": {
              "type": "number",
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get token holders as of any block height",
    "description": "Given `:chain_id` and wallet `:address`, return a paginated list of token holders. If `:block-height` is omitted, the latest block is used.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/tokens/:address/token_holders/",
    "released_at": "",
    "order": 10,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "block-height",
        "description": "Ending block to define a block range. Passing in `latest` uses the latest block height.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example of a list of token holders for Theta Token",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x3883f5e181fccaf8410fa61e12b59bad963fb645"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "TokenHolderResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/TokenHolder"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "TokenHolder": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "address": {
              "type": "string",
              "description": "The address of token holder."
            },
            "balance": {
              "type": "number",
              "description": "The balance of token holder."
            },
            "total_supply": {
              "type": "integer",
              "description": "The total supply of the token."
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int64"
            }
          }
        },
        "TokenHolderResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenHolder"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get changes in token holders between two block heights",
    "description": "Given `:chain_id` and wallet `:address`, return a paginated list of token holders and their current/historical balances, where the token balance of the token holder changes between `:starting-block` and `:ending-block`.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/tokens/:address/token_holders_changes/",
    "released_at": "",
    "order": 11,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "starting-block",
        "description": "Starting block to define a block range.",
        "type": "integer",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "ending-block",
        "description": "Ending block to define a block range.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Basic example of changes in token holders of Theta token between two block_heights",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "address",
            "value": "0x3883f5e181fccaf8410fa61e12b59bad963fb645"
          },
          {
            "name": "starting-block",
            "value": "12500100"
          },
          {
            "name": "ending-block",
            "value": "13210000"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "TokenHolderDiff",
      "schema": {
        "type": "object",
        "properties": {
          "token_holder": {
            "type": "string",
            "description": "The token holder."
          },
          "prev_balance": {
            "type": "number",
            "description": "The starting block balance."
          },
          "prev_block_height": {
            "type": "integer",
            "description": "The starting block height.",
            "format": "int64"
          },
          "next_balance": {
            "type": "number",
            "description": "The ending block balance."
          },
          "next_block_height": {
            "type": "integer",
            "description": "The ending block height.",
            "format": "int64"
          },
          "diff": {
            "type": "number",
            "description": "The difference of the balance."
          }
        }
      },
      "components": {
        "TokenHolderDiff": {
          "type": "object",
          "properties": {
            "token_holder": {
              "type": "string",
              "description": "The token holder."
            },
            "prev_balance": {
              "type": "number",
              "description": "The starting block balance."
            },
            "prev_block_height": {
              "type": "integer",
              "description": "The starting block height.",
              "format": "int64"
            },
            "next_balance": {
              "type": "number",
              "description": "The ending block balance."
            },
            "next_block_height": {
              "type": "integer",
              "description": "The ending block height.",
              "format": "int64"
            },
            "diff": {
              "type": "number",
              "description": "The difference of the balance."
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K network exchange tokens",
    "description": "Given `:chain_id` and `:dexname`, return network exchange tokens for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/tokens/",
    "released_at": "",
    "order": 11,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "NetworkExchangeTokenResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/TokenV2Volume"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "TokenV2Volume": {
          "type": "object",
          "properties": {
            "chain_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dex_name": {
              "type": "string"
            },
            "contract_address": {
              "type": "string"
            },
            "contract_name": {
              "type": "string"
            },
            "total_liquidity": {
              "type": "integer"
            },
            "total_volume_24h": {
              "type": "number"
            },
            "logo_url": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "contract_decimals": {
              "type": "integer",
              "format": "int32"
            },
            "swap_count_24h": {
              "type": "integer",
              "format": "int64"
            },
            "quote_rate": {
              "type": "number",
              "format": "float"
            },
            "total_liquidity_quote": {
              "type": "number",
              "format": "float"
            },
            "total_volume_24h_quote": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "NetworkExchangeTokenResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenV2Volume"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K supported DEXes",
    "description": "Returns a list of DEXes currently supported by the XY=K endpoints.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/xy=k/supported_dexes/",
    "released_at": "",
    "order": 11,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [],
    "templates": [],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "BalanceResponseType",
      "schema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_update_at": {
            "type": "string",
            "format": "date-time"
          },
          "quote_currency": {
            "type": "string"
          },
          "uniswap_v2": {
            "$ref": "#/components/schemas/ContainerU"
          }
        }
      },
      "components": {
        "UniswapV2BalanceItem": {
          "type": "object",
          "properties": {
            "token_0": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "token_1": {
              "$ref": "#/components/schemas/UniswapToken"
            },
            "pool_token": {
              "$ref": "#/components/schemas/UniswapTokenWithSupply"
            }
          }
        },
        "BalanceResponseType": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            },
            "next_update_at": {
              "type": "string",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string"
            },
            "uniswap_v2": {
              "$ref": "#/components/schemas/ContainerU"
            }
          }
        },
        "UniswapTokenWithSupply": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "balance": {
              "type": "integer",
              "description": "Current balance."
            },
            "quote": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float"
            },
            "quote_rate": {
              "type": "number",
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float"
            },
            "total_supply": {
              "type": "integer",
              "description": "Total supply of this pool token."
            }
          }
        },
        "ContainerU": {
          "type": "object",
          "properties": {
            "balances": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapV2BalanceItem"
                }
              }
            }
          }
        },
        "UniswapToken": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "balance": {
              "type": "integer",
              "description": "Current balance."
            },
            "quote": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float"
            },
            "quote_rate": {
              "type": "number",
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get NFT token IDs for contract",
    "description": "Given `:chain_id` and `:contract_address`, return a list of all token IDs for the NFT contract on the blockchain.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/tokens/:contract_address/nft_token_ids/",
    "released_at": "",
    "order": 12,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "contract_address",
        "description": "Smart contract address.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Get token IDs for Meme Ltd",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "contract_address",
            "value": "0xe4605d46fd0b3f8329d936a8b258d69276cba264"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "TokenIdResponseType",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/TokenIdResponse"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "TokenIdResponseType": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/TokenIdResponse"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "TokenIdResponse": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "token_id": {
              "type": "integer",
              "description": "The list of token ids under the contract address."
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K single network exchange token",
    "description": "Given `:chain_id`, `:dexname` and `:token_address`, return single network exchange token for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/tokens/address/:token_address/",
    "released_at": "",
    "order": 12,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "token_address",
        "description": "token address",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "tickers",
        "description": "If `tickers` (a comma separated list) is present, only return the pools that contain these tickers.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "SingleNetworkExchangeTokenResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeVolumeWithVolumeAndLiquidityTimeseries"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "UniswapLikeVolumeChartWithQuote": {
          "type": "object",
          "properties": {
            "dex_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dt": {
              "type": "string",
              "format": "date-time"
            },
            "exchange": {
              "type": "string"
            },
            "sum_amount0in": {
              "type": "number"
            },
            "sum_amount0out": {
              "type": "number"
            },
            "sum_amount1in": {
              "type": "number"
            },
            "sum_amount1out": {
              "type": "number"
            },
            "volume_quote": {
              "type": "number",
              "format": "float"
            },
            "token0_quote_rate": {
              "type": "number",
              "format": "float"
            },
            "token1_quote_rate": {
              "type": "number",
              "format": "float"
            },
            "swap_count_24": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "UniswapLikePriceChartWithQuote": {
          "type": "object",
          "properties": {
            "dex_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dt": {
              "type": "string",
              "format": "date-time"
            },
            "exchange": {
              "type": "string"
            },
            "price_of_token0_in_token1": {
              "type": "number",
              "format": "float"
            },
            "price_of_token0_in_token1_description": {
              "type": "string"
            },
            "price_of_token1_in_token0": {
              "type": "number",
              "format": "float"
            },
            "price_of_token1_in_token0_description": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "price_of_token0_in_quote_currency": {
              "type": "number",
              "format": "float"
            },
            "price_of_token1_in_quote_currency": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "UniswapLikeLiquidityChartWithQuote": {
          "type": "object",
          "properties": {
            "dex_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dt": {
              "type": "string",
              "format": "date-time"
            },
            "exchange": {
              "type": "string"
            },
            "r0_c": {
              "type": "number"
            },
            "r1_c": {
              "type": "number"
            },
            "liquidity_quote": {
              "type": "number",
              "format": "float"
            },
            "token0_quote_rate": {
              "type": "number",
              "format": "float"
            },
            "token1_quote_rate": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "SingleNetworkExchangeTokenResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeVolumeWithVolumeAndLiquidityTimeseries"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "ExchangeVolumeWithVolumeAndLiquidityTimeseries": {
          "type": "object",
          "properties": {
            "dex_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "exchange": {
              "type": "string"
            },
            "swap_count_24h": {
              "type": "integer",
              "format": "int64"
            },
            "total_liquidity_quote": {
              "type": "number",
              "format": "float"
            },
            "volume_24h_quote": {
              "type": "number",
              "format": "float"
            },
            "fee_24h_quote": {
              "type": "number",
              "format": "float"
            },
            "volume_7d_quote": {
              "type": "number",
              "format": "float"
            },
            "annualized_fee": {
              "type": "number",
              "format": "float"
            },
            "total_supply": {
              "type": "integer"
            },
            "quote_rate": {
              "type": "number",
              "format": "float"
            },
            "quote_currency": {
              "type": "string"
            },
            "block_height": {
              "type": "integer",
              "format": "int32"
            },
            "token_0": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token_1": {
              "$ref": "#/components/schemas/TokenV2"
            },
            "token0_reserve_quote": {
              "type": "number",
              "format": "float"
            },
            "token1_reserve_quote": {
              "type": "number",
              "format": "float"
            },
            "volume_timeseries_7d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeChartWithQuote"
                }
              }
            },
            "volume_timeseries_30d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeChartWithQuote"
                }
              }
            },
            "liquidity_timeseries_7d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityChartWithQuote"
                }
              }
            },
            "liquidity_timeseries_30d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityChartWithQuote"
                }
              }
            },
            "price_timeseries_7d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikePriceChartWithQuote"
                }
              }
            },
            "price_timeseries_30d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikePriceChartWithQuote"
                }
              }
            }
          }
        },
        "TokenV2": {
          "type": "object",
          "properties": {
            "contract_address": {
              "type": "string"
            },
            "contract_name": {
              "type": "string"
            },
            "volume_in_24h": {
              "type": "number"
            },
            "volume_out_24h": {
              "type": "number"
            },
            "quote_rate": {
              "type": "number",
              "format": "float"
            },
            "reserve": {
              "type": "integer"
            },
            "logo_url": {
              "type": "string"
            },
            "contract_ticker_symbol": {
              "type": "string"
            },
            "contract_decimals": {
              "type": "integer",
              "format": "int32"
            },
            "volume_in_7d": {
              "type": "number"
            },
            "volume_out_7d": {
              "type": "number"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get NFT transactions for contract",
    "description": "Given `:chain_id`, `:contract_address` and `:token_id`, return a list of transactions.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/tokens/:contract_address/nft_transactions/:token_id/",
    "released_at": "",
    "order": 13,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "contract_address",
        "description": "Smart contract address.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "token_id",
        "description": "The token ID",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Get list of NFT transactions given Meme Ltd token ID",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "contract_address",
            "value": "0xe4605d46fd0b3f8329d936a8b258d69276cba264"
          },
          {
            "name": "token_id",
            "value": "123"
          }
        ]
      }
    ],
    "notes": [
      {
        "title": "sender_logo_url field",
        "description": "sender_logo_url may reference to a not found resource (return status 404)."
      }
    ],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "NftTransactionsResponseType",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/NftTransactionsResponse"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "DecodedParamItem": {
          "type": "object",
          "description": "The parameters of the decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the parameter."
            },
            "type": {
              "type": "string",
              "description": "The type of the parameter."
            },
            "indexed": {
              "type": "boolean",
              "description": "The index of the parameter."
            },
            "decoded": {
              "type": "boolean",
              "description": "The decoded value of the parameter."
            },
            "value": {
              "type": "object",
              "description": "The value of the parameter."
            }
          }
        },
        "DecodedItem": {
          "type": "object",
          "description": "The decoded item.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the decoded item."
            },
            "signature": {
              "type": "string",
              "description": "The signature of the decoded item."
            },
            "params": {
              "type": "array",
              "description": "The parameters of the decoded item.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/DecodedParamItem"
                }
              }
            }
          }
        },
        "LogEventItem": {
          "type": "object",
          "description": "The log events.",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int64"
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int64"
            },
            "log_offset": {
              "type": "integer",
              "description": "The log offset.",
              "format": "int64"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "raw_log_topics": {
              "type": "array",
              "items": {
                "items": {
                  "type": "string"
                }
              }
            },
            "sender_contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "sender_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "sender_contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "sender_address": {
              "type": "string",
              "description": "The address of the sender."
            },
            "sender_address_label": {
              "type": "string",
              "description": "The label of the sender address."
            },
            "sender_logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "raw_log_data": {
              "type": "string",
              "description": "The log events in raw."
            },
            "decoded": {
              "$ref": "#/components/schemas/DecodedItem"
            }
          }
        },
        "NftTransactionsResponse": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "type": {
              "type": "string",
              "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`."
            },
            "nft_transactions": {
              "type": "array",
              "description": "The nft transactions.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/BlockTransactionWithLogEvents"
                }
              }
            }
          }
        },
        "BlockTransactionWithLogEvents": {
          "type": "object",
          "description": "The nft transactions.",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "description": "The signed time of the block.",
              "format": "date-time"
            },
            "block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int32"
            },
            "tx_hash": {
              "type": "string",
              "description": "The transaction hash."
            },
            "tx_offset": {
              "type": "integer",
              "description": "The transaction offset.",
              "format": "int32"
            },
            "successful": {
              "type": "boolean",
              "description": "The transaction status."
            },
            "from_address": {
              "type": "string",
              "description": "The address where the transaction is from."
            },
            "from_address_label": {
              "type": "string",
              "description": "The label of `from` address."
            },
            "to_address": {
              "type": "string",
              "description": "The address where the transaction is to."
            },
            "to_address_label": {
              "type": "string",
              "description": "The label of `to` address."
            },
            "value": {
              "type": "number",
              "description": "The value attached to this tx."
            },
            "value_quote": {
              "type": "number",
              "description": "The value attached in `quote-currency` to this tx.",
              "format": "double"
            },
            "gas_offered": {
              "type": "integer",
              "description": "The gas offered for this tx.",
              "format": "int64"
            },
            "gas_spent": {
              "type": "integer",
              "description": "The gas spent for this tx.",
              "format": "int64"
            },
            "gas_price": {
              "type": "integer",
              "description": "The gas price at the time of this tx.",
              "format": "int64"
            },
            "fees_paid": {
              "type": "number",
              "description": "The total transaction fees paid for this tx."
            },
            "gas_quote": {
              "type": "number",
              "description": "The gas spent in `quote-currency` denomination.",
              "format": "double"
            },
            "gas_quote_rate": {
              "type": "number",
              "description": "The gas exchange rate at the time of Tx in `quote_currency`.",
              "format": "double"
            },
            "log_events": {
              "type": "array",
              "description": "The log events.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/LogEventItem"
                }
              }
            }
          }
        },
        "NftTransactionsResponseType": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/NftTransactionsResponse"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K transactions for account address",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return transactions for account address for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/address/:address/transactions/",
    "released_at": "",
    "order": 13,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "AccountAddressTransactionsResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "ContractMetadata": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            }
          }
        },
        "ExchangeTransaction": {
          "type": "object",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "format": "date-time"
            },
            "tx_hash": {
              "type": "string"
            },
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "to_address": {
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "total_quote": {
              "type": "number",
              "format": "float"
            },
            "quote_currency": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_0_quote_rate": {
              "type": "number",
              "format": "float"
            },
            "token_1_quote_rate": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "AccountAddressTransactionsResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get NFT external metadata for contract",
    "description": "Given `:chain_id`, `:contract_address` and `:token_id`, fetch and return the external metadata. Both ERC721 as well as ERC1155 standards are supported.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/:chain_id/tokens/:contract_address/nft_metadata/:token_id/",
    "released_at": "",
    "order": 14,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "contract_address",
        "description": "Smart contract address.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "token_id",
        "description": "The token ID",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "format",
        "description": "If `format=csv`, return a flat CSV instead of JSON responses.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [
      {
        "description": "Get NFT external metadata given Meme Ltd token ID",
        "params": [
          {
            "name": "chain_id",
            "value": "1"
          },
          {
            "name": "contract_address",
            "value": "0xe4605d46fd0b3f8329d936a8b258d69276cba264"
          },
          {
            "name": "token_id",
            "value": "123"
          }
        ]
      }
    ],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "NFTMetaDataRsponseType",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/WalletBalanceItem"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "NFTMetaDataRsponseType": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/WalletBalanceItem"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "INFTMetadata": {
          "type": "object",
          "description": "Array of NFTs that are held under this contract."
        },
        "WalletBalanceItem": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            },
            "last_transferred_at": {
              "type": "string",
              "description": "Last transferred date for a wallet",
              "format": "date-time"
            },
            "native_token": {
              "type": "boolean",
              "description": "Indicates if a token is the chain's native gas token, eg: ETH on Ethereum."
            },
            "type": {
              "type": "string",
              "description": "One of `cryptocurrency`, `stablecoin`, `nft` or `dust`."
            },
            "balance": {
              "type": "integer",
              "description": "The asset balance. Use `contract_decimals` to scale this balance for display purposes."
            },
            "balance_24h": {
              "type": "integer",
              "description": "The asset balance 24 hours ago."
            },
            "quote_rate": {
              "type": "number",
              "description": "The current spot exchange rate in `quote-currency`.",
              "format": "float"
            },
            "quote_rate_24h": {
              "type": "number",
              "description": "The spot exchange rate in `quote-currency` as of 24 hours ago.",
              "format": "float"
            },
            "quote": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency`.",
              "format": "float"
            },
            "quote_24h": {
              "type": "number",
              "description": "The current balance converted to fiat in `quote-currency` as of 24 hours ago.",
              "format": "float"
            },
            "nft_data": {
              "type": "array",
              "description": "Array of NFTs that are held under this contract.",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/INFTMetadata"
                }
              }
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K transactions for token address",
    "description": "Given `:chain_id`, `:dexname` and `:token_address`, return transactions for token address for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/tokens/address/:token_address/transactions/",
    "released_at": "",
    "order": 14,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "token_address",
        "description": "token address",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "TokenAddressTransactionsResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "ContractMetadata": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            }
          }
        },
        "ExchangeTransaction": {
          "type": "object",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "format": "date-time"
            },
            "tx_hash": {
              "type": "string"
            },
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "to_address": {
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "total_quote": {
              "type": "number",
              "format": "float"
            },
            "quote_currency": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_0_quote_rate": {
              "type": "number",
              "format": "float"
            },
            "token_1_quote_rate": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "TokenAddressTransactionsResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K transactions for exchange",
    "description": "Given `:chain_id`, `:dexname` and `:address`, return transactions for exchange for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/pools/address/:address/transactions/",
    "released_at": "",
    "order": 15,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "address",
        "description": "Passing in an `ENS` resolves automatically.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "ExchangeTransactionsResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/ExchangeTransaction"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "ContractMetadata": {
          "type": "object",
          "properties": {
            "contract_decimals": {
              "type": "integer",
              "description": "Smart contract decimals.",
              "format": "int32"
            },
            "contract_name": {
              "type": "string",
              "description": "Smart contract name."
            },
            "contract_ticker_symbol": {
              "type": "string",
              "description": "Smart contract ticker symbol."
            },
            "contract_address": {
              "type": "string",
              "description": "Smart contract address."
            },
            "supports_erc": {
              "type": "array",
              "description": "The standard interface(s) supported for this token, eg: `ERC-20`.",
              "items": {
                "items": {
                  "type": "string",
                  "description": "The standard interface(s) supported for this token, eg: `ERC-20`."
                }
              }
            },
            "logo_url": {
              "type": "string",
              "description": "Smart contract URL."
            }
          }
        },
        "ExchangeTransaction": {
          "type": "object",
          "properties": {
            "block_signed_at": {
              "type": "string",
              "format": "date-time"
            },
            "tx_hash": {
              "type": "string"
            },
            "act": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "amount_0": {
              "type": "number"
            },
            "amount_1": {
              "type": "number"
            },
            "amount_0_in": {
              "type": "number"
            },
            "amount_1_in": {
              "type": "number"
            },
            "amount_0_out": {
              "type": "number"
            },
            "amount_1_out": {
              "type": "number"
            },
            "to_address": {
              "type": "string"
            },
            "from_address": {
              "type": "string"
            },
            "sender_address": {
              "type": "string"
            },
            "total_quote": {
              "type": "number",
              "format": "float"
            },
            "quote_currency": {
              "type": "string"
            },
            "token_0": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_1": {
              "$ref": "#/components/schemas/ContractMetadata"
            },
            "token_0_quote_rate": {
              "type": "number",
              "format": "float"
            },
            "token_1_quote_rate": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "ExchangeTransactionsResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ExchangeTransaction"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K ecosystem chart data",
    "description": "Given `:chain_id` and `:dexname`, return ecosystem chart data for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/ecosystem/",
    "released_at": "",
    "order": 16,
    "realTime": false,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "quote-currency",
        "description": "The requested fiat currency.",
        "type": "string",
        "required": false,
        "primer": false,
        "global": true,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "EcosystemResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/UniswapLikeEcosystemCharts"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "EcosystemResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeEcosystemCharts"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "UniswapLikeEcosystemCharts": {
          "type": "object",
          "properties": {
            "dex_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "quote_currency": {
              "type": "string"
            },
            "gas_token_price_quote": {
              "type": "number",
              "format": "float"
            },
            "total_swaps_24h": {
              "type": "integer",
              "format": "int64"
            },
            "total_active_pairs_7d": {
              "type": "integer",
              "format": "int64"
            },
            "total_fees_24h": {
              "type": "number",
              "format": "float"
            },
            "volume_chart_7d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeEcosystemChart"
                }
              }
            },
            "volume_chart_30d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeVolumeEcosystemChart"
                }
              }
            },
            "liquidity_chart_7d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityEcosystemChart"
                }
              }
            },
            "liquidity_chart_30d": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/UniswapLikeLiquidityEcosystemChart"
                }
              }
            }
          }
        },
        "UniswapLikeVolumeEcosystemChart": {
          "type": "object",
          "properties": {
            "dex_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dt": {
              "type": "string",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string"
            },
            "volume_quote": {
              "type": "number",
              "format": "float"
            },
            "swap_count_24": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "UniswapLikeLiquidityEcosystemChart": {
          "type": "object",
          "properties": {
            "dex_name": {
              "type": "string"
            },
            "chain_id": {
              "type": "string"
            },
            "dt": {
              "type": "string",
              "format": "date-time"
            },
            "quote_currency": {
              "type": "string"
            },
            "liquidity_quote": {
              "type": "number",
              "format": "float"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get XY=K health data",
    "description": "Given `:chain_id` and `:dexname`, return last synced block height data and latest block height for a specific DEX.",
    "classType": "Class B",
    "classSubType": "xy=k",
    "classSubTypeDescription": "xy=k is a generalized Uniswap-like endpoints for exchanges on various chains.",
    "path": "/v1/:chain_id/xy=k/:dexname/health/",
    "released_at": "",
    "order": 17,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [
      {
        "name": "chain_id",
        "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": true,
        "pathParam": true,
        "choices": []
      },
      {
        "name": "dexname",
        "description": "One of `sushiswap`, `pancakeswap`, `quickswap`, `pangolin`, `spiritswap`, `spookyswap`.",
        "type": "string",
        "required": true,
        "primer": false,
        "global": false,
        "pathParam": true,
        "choices": [
          "uniswap_v2",
          "sushiswap",
          "pancakeswap_v2",
          "quickswap",
          "pangolin",
          "spiritswap",
          "spookyswap",
          "traderjoe",
          "standard",
          "apeswap_v2",
          "katana",
          "stellaswap",
          "beamswap"
        ]
      },
      {
        "name": "page-number",
        "description": "The specific page to be returned.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      },
      {
        "name": "page-size",
        "description": "The number of results per page.",
        "type": "integer",
        "required": false,
        "primer": false,
        "global": false,
        "pathParam": false,
        "choices": []
      }
    ],
    "templates": [],
    "notes": [],
    "supportedProtocols": [
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/uniswap.png",
        "id": "uniswapv2",
        "name": "Uniswap V2",
        "supportedChains": ["ethereum-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/sushi.png",
        "id": "sushiswap",
        "name": "SushiSwap",
        "supportedChains": [
          "ethereum-mainnet",
          "matic-mainnet",
          "fantom-mainnet",
          "fantom-testnet",
          "avalanche-testnet",
          "avalanche-mainnet",
          "bsc-mainnet",
          "matic-mumbai"
        ]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pancakeswap.png",
        "id": "pancakeswap",
        "name": "PancakeSwap",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/spiritswap.png",
        "id": "spiritswap",
        "name": "SpiritSwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Spookyswap.png",
        "id": "spookyswap",
        "name": "SpookySwap",
        "supportedChains": ["fantom-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Quickswap.png",
        "id": "quickswap",
        "name": "QuickSwap",
        "supportedChains": ["matic-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ApeSwap.png",
        "id": "apeswapv2",
        "name": "ApeSwap V2",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Pangolin.png",
        "id": "pangolin",
        "name": "Pangolin",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trader Joe.png",
        "id": "traderjoe",
        "name": "Trader Joe",
        "supportedChains": ["avalanche-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Standard.png",
        "id": "standard",
        "name": "Standard",
        "supportedChains": ["astar-shiden"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Katana.png",
        "id": "katana",
        "name": "Katana",
        "supportedChains": ["axie-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Stellaswap.png",
        "id": "stellaswap",
        "name": "StellaSwap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Beamswap.png",
        "id": "beamswap",
        "name": "Beamswap",
        "supportedChains": ["moonbeam-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Empire.png",
        "id": "empire",
        "name": "Empire",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Moonlift.png",
        "id": "moonlift",
        "name": "MoonLift",
        "supportedChains": ["bsc-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mimo.png",
        "id": "mimo",
        "name": "Mimo",
        "supportedChains": ["iotex-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Claimswap.png",
        "id": "claimswap",
        "name": "Claimswap",
        "supportedChains": ["klaytn-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/WannaSwap.png",
        "id": "wannaswap",
        "name": "Wannaswap",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Trisolaris.png",
        "id": "trisolaris",
        "name": "Trisolaris",
        "supportedChains": ["aurora-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Diffusion.png",
        "id": "diffusion",
        "name": "Diffusion",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Cronus.png",
        "id": "cronus",
        "name": "Cronus",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Evmoswap.png",
        "id": "evmoswap",
        "name": "EVMOSwap",
        "supportedChains": ["evmos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/ArthSwap.png",
        "id": "arthswap",
        "name": "ArthSwap",
        "supportedChains": ["astar-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/Mmf.png",
        "id": "mmf",
        "name": "Mad Meerkat Finance",
        "supportedChains": ["cronos-mainnet"]
      },
      {
        "logoURL": "https://www.covalenthq.com/static/images/dex-logos/VVSFinancial.png",
        "id": "vvs",
        "name": "VVS Finance",
        "supportedChains": ["cronos-mainnet"]
      }
    ],
    "response": {
      "status": 200,
      "name": "HealthDataResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/HealthData"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "HealthData": {
          "type": "object",
          "properties": {
            "synced_block_height": {
              "type": "integer",
              "format": "int32"
            },
            "synced_block_signed_at": {
              "type": "string",
              "format": "date-time"
            },
            "latest_block_height": {
              "type": "integer",
              "format": "int32"
            },
            "latest_block_signed_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "HealthDataResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/HealthData"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get all chains",
    "description": "Returns a list of all chains.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/chains/",
    "released_at": "",
    "order": 18,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [],
    "templates": [],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "AllChainInfoResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/GenericChainInfoDisplay"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "GenericChainInfoDisplay": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of chain"
            },
            "chain_id": {
              "type": "string",
              "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet."
            },
            "is_testnet": {
              "type": "boolean"
            },
            "db_schema_name": {
              "type": "string"
            },
            "label": {
              "type": "string"
            },
            "logo_url": {
              "type": "string"
            }
          }
        },
        "AllChainInfoResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/GenericChainInfoDisplay"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        }
      }
    }
  },
  {
    "id": "1",
    "title": "Get all chain statuses",
    "description": "Returns a list of all chain statuses.",
    "classType": "Class A",
    "classSubType": "",
    "classSubTypeDescription": "",
    "path": "/v1/chains/status/",
    "released_at": "",
    "order": 19,
    "realTime": true,
    "websocketSupport": false,
    "isBeta": false,
    "params": [],
    "templates": [],
    "notes": [],
    "supportedProtocols": [],
    "response": {
      "status": 200,
      "name": "ChainStatusResponse",
      "schema": {
        "type": "object",
        "properties": {
          "updated_at": {
            "type": "string",
            "description": "The updated time.",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "items": {
                "$ref": "#/components/schemas/GenericChainInfoStatusDisplay"
              }
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/AppliedPagination"
          }
        }
      },
      "components": {
        "AppliedPagination": {
          "type": "object",
          "properties": {
            "has_more": {
              "type": "boolean",
              "description": "`true` if we can  paginate to get more data."
            },
            "page_number": {
              "type": "integer",
              "description": "The specific page being returned.",
              "format": "int32"
            },
            "page_size": {
              "type": "integer",
              "description": "The number of results per page.",
              "format": "int32"
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of entries.",
              "format": "int32"
            }
          }
        },
        "ChainStatusResponse": {
          "type": "object",
          "properties": {
            "updated_at": {
              "type": "string",
              "description": "The updated time.",
              "format": "date-time"
            },
            "items": {
              "type": "array",
              "items": {
                "items": {
                  "$ref": "#/components/schemas/GenericChainInfoStatusDisplay"
                }
              }
            },
            "pagination": {
              "$ref": "#/components/schemas/AppliedPagination"
            }
          }
        },
        "GenericChainInfoStatusDisplay": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of chain"
            },
            "chain_id": {
              "type": "string",
              "description": "Chain ID of the Blockchain being queried. Currently supports `1` for Ethereum Mainnet, `137` for Polygon/Matic Mainnet, `80001` for Polygon/Matic Mumbai Testnet, `56` for Binance Smart Chain, `43114` for Avalanche C-Chain Mainnet, `43113` for Fuji C-Chain Testnet, and `250` for Fantom Opera Mainnet."
            },
            "is_testnet": {
              "type": "boolean"
            },
            "logo_url": {
              "type": "string"
            },
            "synced_block_height": {
              "type": "integer",
              "description": "The height of the block.",
              "format": "int32"
            },
            "synced_blocked_signed_at": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    }
  }
]
